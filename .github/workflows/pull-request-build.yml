name: Pull Request Build

on:
  workflow_dispatch:
  repository_dispatch:
    types: [pull-request-build]

jobs:
  Build:
    runs-on: ${{ matrix.os }}

    outputs:
      linux-env-result: ${{ matrix.os == 'ubuntu-latest' && steps.set-basic-env-result-linux.outputs.result || 'skipped' }}
      windows-env-result: ${{ matrix.os == 'windows-latest' && steps.set-basic-env-result-windows.outputs.result || 'skipped' }}
      linux-build-result: ${{ steps.set-linux-result.outputs.result }}
      windows-build-result: ${{ steps.set-windows-result.outputs.result }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v5
        with:
          repository: outsidee-Inc/gds-data
          token: ${{ secrets.GDS_DATA }}
          path: src
        continue-on-error: true
      
      - name: Install Rust
        id: install-rust
        uses: dtolnay/rust-toolchain@stable
        continue-on-error: true

      - name: Set Rust caching env vars only on non-release runs
        id: set-cache-env
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV
          echo "RUST_LOG=debug" >> $GITHUB_ENV
          echo "DUCKDB_BUILD_CACHE=1" >> $GITHUB_ENV
        continue-on-error: true
        
      - name: Set basic environment result
        id: set-basic-env-result-linux
        if: always() && runner.os == 'Linux'
        shell: bash
        run: |
          CHECKOUT_STATUS="${{ steps.checkout.outcome }}"
          RUST_STATUS="${{ steps.install-rust.outcome }}"
          CACHE_ENV_STATUS="${{ steps.set-cache-env.outcome }}"
          
          echo "Checkout: $CHECKOUT_STATUS"
          echo "Install Rust: $RUST_STATUS"  
          echo "Set Cache Env: $CACHE_ENV_STATUS"
          
          if [ "$CHECKOUT_STATUS" = "success" ] && [ "$RUST_STATUS" = "success" ] && [ "$CACHE_ENV_STATUS" = "success" ]; then
            echo "result=success" >> $GITHUB_OUTPUT
            echo "Basic environment setup completed successfully"
          else
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "Basic environment setup failed"
          fi

      - name: Set basic environment result
        id: set-basic-env-result-windows
        if: always() && runner.os == 'Windows'
        shell: pwsh
        run: |
          $CHECKOUT_STATUS = "${{ steps.checkout.outcome }}"
          $RUST_STATUS = "${{ steps.install-rust.outcome }}"
          $CACHE_ENV_STATUS = "${{ steps.set-cache-env.outcome }}"
          
          Write-Host "Checkout: $CHECKOUT_STATUS"
          Write-Host "Install Rust: $RUST_STATUS"
          Write-Host "Set Cache Env: $CACHE_ENV_STATUS"
          
          if (($CHECKOUT_STATUS -eq "success") -and ($RUST_STATUS -eq "success") -and ($CACHE_ENV_STATUS -eq "success")) {
            "result=success" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            Write-Host "Basic environment setup completed successfully"
          } else {
            "result=failure" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            Write-Host "Basic environment setup failed"
          }
        
      # windows
      - uses: robinraju/release-downloader@v1.4
        id: download-duckdb
        name: Download duckdb
        with:
          repository: "duckdb/duckdb"
          tag: "v1.3.2"
          fileName: libduckdb-windows-amd64.zip
          out-file-path: .
        continue-on-error: true

      - name: Windows extract duckdb
        id: extract-duckdb
        if: matrix.os == 'windows-latest'
        uses: DuckSoft/extract-7z-action@v1.0
        with:
          pathSource: D:\a\gds-data-ci\gds-data-ci\libduckdb-windows-amd64.zip
          pathTarget: ${{ github.workspace }}/libduckdb
        continue-on-error: true

      - name: Add path to PATH environment variable
        id: add-path
        if: matrix.os == 'windows-latest'
        uses: myci-actions/export-env-var-powershell@1
        with:
          name: PATH
          value: $env:PATH;${{ github.workspace }}/libduckdb
        continue-on-error: true

      - name: Build gds data on windows
        id: build-windows
        if: matrix.os == 'windows-latest' && steps.set-basic-env-result-windows.outputs.result == 'success'
        run: cargo build
        working-directory: src
        continue-on-error: true
        env:
          DUCKDB_LIB_DIR: ${{ github.workspace }}/libduckdb
          DUCKDB_INCLUDE_DIR: ${{ github.workspace }}/libduckdb
      
      - name: Set Windows build result
        id: set-windows-result
        if: always() && matrix.os == 'windows-latest'
        run: |
          BASIC_ENV_RESULT="${{ steps.set-basic-env-result-windows.outputs.result }}"
          BUILD_RESULT="${{ steps.build-windows.outcome }}"
          
          if [ "$BASIC_ENV_RESULT" != "success" ]; then
            echo "result=skipped" >> $GITHUB_OUTPUT
            echo "Windows build skipped due to basic environment failure"
          elif [ "$BUILD_RESULT" = "success" ]; then
            echo "result=success" >> $GITHUB_OUTPUT
            echo "Windows build completed successfully"
          elif [ "$BUILD_RESULT" = "failure" ]; then
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "Windows build failed"
          else
            echo "result=unknown" >> $GITHUB_OUTPUT
            echo "Windows build status unknown"
          fi

      - name: Build gds data on linux
        id: build-linux
        if: matrix.os == 'ubuntu-latest' && steps.set-basic-env-result-linux.outputs.result == 'success'
        run: cargo build
        working-directory: src
        continue-on-error: true

      - name: Set Linux build result
        id: set-linux-result
        if: always() && matrix.os == 'ubuntu-latest'
        run: |
          BASIC_ENV_RESULT="${{ steps.set-basic-env-result-linux.outputs.result }}"
          BUILD_RESULT="${{ steps.build-linux.outcome }}"
          
          if [ "$BASIC_ENV_RESULT" != "success" ]; then
            echo "result=skipped" >> $GITHUB_OUTPUT
            echo "Linux build skipped due to basic environment failure"
          elif [ "$BUILD_RESULT" = "success" ]; then
            echo "result=success" >> $GITHUB_OUTPUT
            echo "Linux build completed successfully"
          elif [ "$BUILD_RESULT" = "failure" ]; then
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "Linux build failed"
          else
            echo "result=unknown" >> $GITHUB_OUTPUT
            echo "Linux build status unknown"
          fi

  Comment:
    needs: Build
    runs-on: ubuntu-latest
    if: always()

    permissions:
      pull-requests: write

    steps:
      - name: Comment PR with detailed results
        shell: bash
        run: |
          gh auth setup-git --with-token <<< "${{ secrets.GDS_DATA }}"
          
          LINUX_ENV_RESULT="${{ needs.build.outputs.linux-env-result }}"
          WINDOWS_ENV_RESULT="${{ needs.build.outputs.windows-env-result }}"
          LINUX_BUILD_RESULT="${{ needs.build.outputs.linux-build-result }}"
          WINDOWS_BUILD_RESULT="${{ needs.build.outputs.windows-build-result }}"
          
          echo "Linux Env: $LINUX_ENV_RESULT"
          echo "Windows Env: $WINDOWS_ENV_RESULT"
          echo "Linux Build: $LINUX_BUILD_RESULT"
          echo "Windows Build: $WINDOWS_BUILD_RESULT"
          
          # Determine overall environment status
          if [ "$LINUX_ENV_RESULT" = "success" ] && [ "$WINDOWS_ENV_RESULT" = "success" ]; then
            BASIC_ENV_STATUS="✅ **Basic Environment**: Setup Successful"
          elif [ "$LINUX_ENV_RESULT" = "skipped" ] || [ "$WINDOWS_ENV_RESULT" = "skipped" ]; then
            BASIC_ENV_STATUS="⚠️ **Basic Environment**: Partially Skipped"
          else
            BASIC_ENV_STATUS="❌ **Basic Environment**: Setup Failed"
          fi
          
          if [ "$LINUX_BUILD_RESULT" = "success" ]; then
            LINUX_BUILD_STATUS="✅ **Linux Build**: Build Successful"
          elif [ "$LINUX_BUILD_RESULT" = "failure" ]; then
            LINUX_BUILD_STATUS="❌ **Linux Build**: Build Failed"
          elif [ "$LINUX_BUILD_RESULT" = "skipped" ]; then
            LINUX_BUILD_STATUS="⏭️ **Linux Build**: Build Skipped (Basic Environment Failed)"
          else
            LINUX_BUILD_STATUS="❓ **Linux Build**: Status Unknown"
          fi
          
          if [ "$WINDOWS_BUILD_RESULT" = "success" ]; then
            WINDOWS_BUILD_STATUS="✅ **Windows Build**: Build Successful"
          elif [ "$WINDOWS_BUILD_RESULT" = "failure" ]; then
            WINDOWS_BUILD_STATUS="❌ **Windows Build**: Build Failed"
          elif [ "$WINDOWS_BUILD_RESULT" = "skipped" ]; then
            WINDOWS_BUILD_STATUS="⏭️ **Windows Build**: Build Skipped (Basic Environment Failed)"
          else
            WINDOWS_BUILD_STATUS="❓ **Windows Build**: Status Unknown"
          fi
          
          if [ "$LINUX_ENV_RESULT" = "success" ] && [ "$WINDOWS_ENV_RESULT" = "success" ] && [ "$LINUX_BUILD_RESULT" = "success" ] && [ "$WINDOWS_BUILD_RESULT" = "success" ]; then
            OVERALL_STATUS="🎉 **CI Overall Status: All Successful**"
            STATUS_EMOJI="🎉"
          elif [ "$LINUX_ENV_RESULT" != "success" ] || [ "$WINDOWS_ENV_RESULT" != "success" ]; then
            OVERALL_STATUS="💥 **CI Overall Status: Basic Environment Failed**"
            STATUS_EMOJI="💥"
          else
            OVERALL_STATUS="⚠️ **CI Overall Status: Partially Failed**"
            STATUS_EMOJI="⚠️"
          fi
          
          CI_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          CURRENT_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          COMMENT_BODY="$STATUS_EMOJI $OVERALL_STATUS

          ## 📋 Detailed Results

          ### 🔧 Stage Status
          $BASIC_ENV_STATUS
          $LINUX_BUILD_STATUS  
          $WINDOWS_BUILD_STATUS

          ### 📊 Execution Information
          - 🔗 **Detailed Log**: [CI Execution Log #${{ github.run_number }}]($CI_URL)
          - ⏰ **Execution Time**: $CURRENT_TIME"

          if [ "$LINUX_ENV_RESULT" != "success" ] || [ "$WINDOWS_ENV_RESULT" != "success" ]; then
            COMMENT_BODY="$COMMENT_BODY

          > ⚠️  **Note**: Some builds have been skipped due to environment setup failures. Please check the environment configuration and re-run CI."
          fi

          echo "$COMMENT_BODY" | gh pr comment ${{ github.event.client_payload.pr_number }} --body-file -
        env:
          GH_TOKEN: ${{ secrets.GDS_DATA }}